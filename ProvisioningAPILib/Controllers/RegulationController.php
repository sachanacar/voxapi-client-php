<?php
/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/06/2015
 */

class RegulationController {

    /* private fields for configuration */

    /**
     * The username to use with basic authentication 
     * @var string
     */
    private $basicAuthUserName;

    /**
     * The password to use with basic authentication 
     * @var string
     */
    private $basicAuthPassword;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($basicAuthUserName = NULL, $basicAuthPassword = NULL)
    {
        $this->basicAuthUserName = $basicAuthUserName ? $basicAuthUserName : Configuration::$BasicAuthUserName;
        $this->basicAuthPassword = $basicAuthPassword ? $basicAuthPassword : Configuration::$BasicAuthPassword;
    }

    /**
     * listRegulationAddress is a method that allows you to list or your existing regulation addresses.
     * @param   string $pageNumber    Required parameter: The page number, starting at 0.
     * @param   string $pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param   string|null $regulationAddressId    Optional parameter: Identifier of the regulation address id.
     * @param   string|null $companyName    Optional parameter: Name of the company.
     * @param   string|null $firstName    Optional parameter: First name of the customer.
     * @param   string|null $lastName    Optional parameter: Last name of the customer.
     * @param   string|null $countryCodeA3    Optional parameter: The three letter identifier for the address's country.
     * @param   string|null $city    Optional parameter: The city for the address.
     * @param   string|null $zipCode    Optional parameter: The zip code for the address.
     * @param   string|null $streetName    Optional parameter: The street for the address.
     * @param   string|null $buildingNumber    Optional parameter: The building number for the address.
     * @param   string|null $customerReference    Optional parameter: The reference for the customer.
     * @param   string|null $status    Optional parameter: The status of the regulation address.
     * @param   bool|null $linked    Optional parameter: Flag that specifies if the addresses should be linked to a DID.
     * @return mixed response from the API call*/
    public function listRegulationAddress (
                $pageNumber,
                $pageSize,
                $regulationAddressId = NULL,
                $companyName = NULL,
                $firstName = NULL,
                $lastName = NULL,
                $countryCodeA3 = NULL,
                $city = NULL,
                $zipCode = NULL,
                $streetName = NULL,
                $buildingNumber = NULL,
                $customerReference = NULL,
                $status = NULL,
                $linked = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber' => $pageNumber,
            'pageSize' => $pageSize,
            'regulationAddressId' => $regulationAddressId,
            'companyName' => $companyName,
            'firstName' => $firstName,
            'lastName' => $lastName,
            'countryCodeA3' => $countryCodeA3,
            'city' => $city,
            'zipCode' => $zipCode,
            'streetName' => $streetName,
            'buildingNumber' => $buildingNumber,
            'customerReference' => $customerReference,
            'status' => $status,
            'linked' => $linked,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * listZipCodes is a method that allows you to get the matching cities and zip codes for a certain country or DID’s area code. This is an absolute requirement for certain countries where the city and zip code will have to match the DID’s area code for instance in Germany (DEU), Croatia (HRV), South Korea (KOR), etc…
     * @param   string $countryCodeA3    Required parameter: The A3 code of the country to look for zip codes.
     * @param   string $pageNumber    Required parameter: The page number, starting at 0.
     * @param   string $pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param   string|null $areaCode    Optional parameter: The area code to look for zip codes.
     * @return mixed response from the API call*/
    public function listZipCodes (
                $countryCodeA3,
                $pageNumber,
                $pageSize,
                $areaCode = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/zipcode';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'countryCodeA3' => $countryCodeA3,
            'pageNumber' => $pageNumber,
            'pageSize' => $pageSize,
            'areaCode' => $areaCode,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Unlinking regulation address is a different request in REST than linking regulation addresses but the same request in SOAP. The difference is only to set the regulationAddressId field empty.
     * @param   array $didIds    Required parameter: Array of DID IDs you wish to unlink to a regulation address.
     * @return mixed response from the API call*/
    public function createUnlinkRegulationAddress (
                $didIds) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address/unlink';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-type' => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($didIds), $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * deleteRegulationAddress is a method that allows you to delete a regulation address.
     * @param   string $regulationAddressId    Required parameter: The regulation address identifier.
     * @return mixed response from the API call*/
    public function deleteRegulationAddress (
                $regulationAddressId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address/{regulationAddressId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'regulationAddressId' => $regulationAddressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
 
    /**
     * linkRegulationAddress is a method that allows you to link one or multiple DIDs to a regulation address.
     * @param   string $regulationAddressId    Required parameter: The identifier of the regulation address.
     * @param   string $didIds    Required parameter: This is the ID of the regulation address to which you want to link the DID.
     * @return mixed response from the API call*/
    public function linkRegulationAddress (
                $addressId, $didIds) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address/{addressId}/link';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId' => $addressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        );

        $body = json_encode(array(
            'didIds' => $didIds,
            'addressId' => $addressId
        ));

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $body, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * uploadProofOfAddress is a method that allows you to separately upload a proof of address after the address is created (the upload is done automatically during the address creation if the document is specified).
     * @param   string|null $regulationAddressId    Optional parameter: The identifier of the regulation address.
     * @return mixed response from the API call*/
    public function uploadProofOfAddress (
                $regulationAddressId = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address/{regulationAddressId}/proof';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'regulationAddressId' => $regulationAddressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-Type:' => 'multipart/form-data;boundary=XXX'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, NULL, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * isAddressValid is a method that allows to check the validity of an address against a certain DID’s type and country. This can be useful if you have originally created an address for a given DID and you wish to reuse that same address for another DID.
     * @param   string $didType    Required parameter: The did type for the destination did.
     * @param   string $destinationCountryCodeA3    Required parameter: The three letter identifier for country the destination did.
     * @param   string $regulationAddressId    Required parameter: The identifier of the regulation address.
     * @return mixed response from the API call*/
    public function getIsAddressValid (
                $didType,
                $destinationCountryCodeA3,
                $regulationAddressId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address/{regulationAddressId}/validation';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'regulationAddressId' => $regulationAddressId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'didType' => $didType,
            'destinationCountryCodeA3' => $destinationCountryCodeA3,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * requestAddressVerification is a method that allows you to request a separate address verification.
     * @param   string $regulationAddressId    Required parameter: The identifier of the regulation address.
     * @return mixed response from the API call*/
    public function requestAddressVerification (
                $regulationAddressId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/regulation/address/{regulationAddressId}/verification';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'regulationAddressId' => $regulationAddressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, NULL, $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
}
